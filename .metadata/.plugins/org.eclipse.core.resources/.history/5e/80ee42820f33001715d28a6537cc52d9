package taller4;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;




public class Problema_B {
	
	

public static class MyLinkedList<AnyType> implements Iterable<AnyType>
	{

	    public MyLinkedList( )
	    {
	        doClear( );
	    }
	    
	    private void clear( )
	    {
	        doClear( );
	    }

	    public void doClear( )
	    {
	        beginMarker = new Node<>( null, null, null );
	        endMarker = new Node<>( null, beginMarker, null );
	        beginMarker.next = endMarker;
	        
	        theSize = 0;
	        modCount++;
	    }

	    public int size( )
	    {
	        return theSize;
	    }
	    
	    public boolean isEmpty( )
	    {
	        return size( ) == 0;
	    }

	    public boolean add( AnyType x )
	    {
	        
	        add( size( ), x );   
	        return true;         
	    }

	    public void add( int idx, AnyType x )
	    {
	        addBefore( getNode( idx, 0, size( ) ), x );
	    }
  
	    private void addBefore( Node<AnyType> p, AnyType x )
	    {
	        Node<AnyType> newNode = new Node<>( x, p.prev, p );
	        newNode.prev.next = newNode;
	        p.prev = newNode;         
	        theSize++;
	        modCount++;
	    }   

	    public AnyType get( int idx )
	    {
	        return getNode( idx ).data;
	    }

	    public AnyType set( int idx, AnyType newVal )
	    {
	        Node<AnyType> p = getNode( idx );
	        AnyType oldVal = p.data;
	        
	        p.data = newVal;   
	        return oldVal;
	    }

	    private Node<AnyType> getNode( int idx )
	    {
	        return getNode( idx, 0, size( ) - 1 );
	    }

	    private Node<AnyType> getNode( int idx, int lower, int upper )
	    {
	        Node<AnyType> p;  
	        if( idx < lower || idx > upper )
	            throw new IndexOutOfBoundsException( "getNode index: " + idx + "; size: " + size( ) );
	        if( idx < size( ) / 2 ){
	            p = beginMarker.next;
	            for( int i = 0; i < idx; i++ )
	                p = p.next;            
	        }
	        else{
	            p = endMarker;
	            for( int i = size( ); i > idx; i-- )
	                p = p.prev;
	        }         
	        return p;
	    }

	    public AnyType remove( int idx )
	    {
	        return remove( getNode( idx ) );
	    }

	    private AnyType remove( Node<AnyType> p )
	    {
	        p.next.prev = p.prev;
	        p.prev.next = p.next;
	        theSize--;
	        modCount++;
	        
	        return p.data;
	    }

	    public String toString( )
	    {
	        StringBuilder sb = new StringBuilder( "[ " );

	        for( AnyType x : this )
	            sb.append( x + " " );
	        sb.append( "]" );

	        return new String( sb );
	    }
	    
	    
	   public void enqueue(AnyType x){
		   
		   add(x);
	   }
	   
	   
	   public void enqueue_inverse (AnyType x){
		   add(0,x);
		   
	   }
	    
	   public AnyType dequeue(){
		   
		  return remove(0);
	   } 
	   
	   public AnyType dequeue_inverse(){
		   
		  return remove(theSize-1);
	   } 
	    
	    
	   public AnyType peek(){
		   
		  return get(0);
	   }       

	    public java.util.Iterator<AnyType> iterator( )
	    {
	        return new LinkedListIterator( );
	    }

	    private class LinkedListIterator implements java.util.Iterator<AnyType>
	    {
	        private Node<AnyType> current = beginMarker.next;
	        private int expectedModCount = modCount;
	        private boolean okToRemove = false;
	        
	        public boolean hasNext( )
	        {
	            return current != endMarker;
	        }
	        
	        public AnyType next( )
	        {
	            if( modCount != expectedModCount )
	                throw new java.util.ConcurrentModificationException( );
	            if( !hasNext( ) )
	                throw new java.util.NoSuchElementException( ); 
	                   
	            AnyType nextItem = current.data;
	            current = current.next;
	            okToRemove = true;
	            return nextItem;
	        }
	        
	        public void remove( )
	        {
	            if( modCount != expectedModCount )
	                throw new java.util.ConcurrentModificationException( );
	            if( !okToRemove )
	                throw new IllegalStateException( );
	                
	            MyLinkedList.this.remove( current.prev );
	            expectedModCount++;
	            okToRemove = false;       
	        }
	    }

	    private static class Node<AnyType>
	    {
	        public Node( AnyType d, Node<AnyType> p, Node<AnyType> n )
	        {
	            data = d; prev = p; next = n;
	        }
	        
	        public AnyType data;
	        public Node<AnyType>   prev;
	        public Node<AnyType>   next;
	    }
	    
	    private int theSize;
	    private int modCount = 0;
	    private Node<AnyType> beginMarker;
	    private Node<AnyType> endMarker;
	}



public static class MyArrayList<AnyType> implements Iterable<AnyType>
{
    
	
	/**
     * Construct an empty ArrayList.
     */
    public MyArrayList( )
    {
        //theItems[] = AnyType[tamano];
        doClear( );
    }
    
 
    public int size( )
    {
        return theSize;
    }
    
   
    public boolean isEmpty( )
    {
        return size( ) == 0;
    }
    
   
    public AnyType get( int idx )
    {
        if( idx < 0 || idx >= size( ) )
            throw new ArrayIndexOutOfBoundsException( "Index " + idx + "; size " + size( ) );
        return theItems[ idx ];    
    }
    
    public AnyType set( int idx, AnyType newVal )
    {
        if( idx < 0 || idx >= size( ) )
            throw new ArrayIndexOutOfBoundsException( "Index " + idx + "; size " + size( ) );
        AnyType old = theItems[ idx ];    
        theItems[ idx ] = newVal;
        
        return old;    
    }

    @SuppressWarnings("unchecked")
    public void ensureCapacity( int newCapacity )
    {
        if( newCapacity < theSize )
            return;

        AnyType [ ] old = theItems;
        theItems = (AnyType []) new Object[ newCapacity ];
        for( int i = 0; i < size( ); i++ )
            theItems[ i ] = old[ i ];
    }
    
 
    public boolean add( AnyType x )
    {
    add( size( ), x );
        return true;            
    }
    
    public void add( int idx, AnyType x )
    {
        if( theItems.length == size( ) )
            ensureCapacity( size( ) * 2 + 1 );

        for( int i = theSize; i > idx; i-- )
            theItems[ i ] = theItems[ i - 1 ];

        theItems[ idx ] = x;
        theSize++;  
    }
   
    public AnyType remove( int idx )
    {
        AnyType removedItem = theItems[ idx ];
        
        for( int i = idx; i < size( ) - 1; i++ )
            theItems[ i ] = theItems[ i + 1 ];
        theSize--;    
        
        return removedItem;
    }
   
    public void clear( )
    {
        doClear( );
    }
    
    private void doClear( )
    {
        theSize = 0;
        ensureCapacity( DEFAULT_CAPACITY );
    }
   
    public java.util.Iterator<AnyType> iterator( )
    {
        return new ArrayListIterator( );
    }
 public String toString( )
    {
            StringBuilder sb = new StringBuilder( "[ " );

            for( AnyType x : this )
                sb.append( x + " " );
            sb.append( "]" );

            return new String( sb );
    }
 
    private class ArrayListIterator implements java.util.Iterator<AnyType>
    {
        private int current = 0;
        private boolean okToRemove = false;
        
        public boolean hasNext( )
        {
            return current < size( );
        }
        
        
        public AnyType next( )
        {
            if( !hasNext( ) ) 
                throw new java.util.NoSuchElementException( ); 
                  
            okToRemove = true;    
            return theItems[ current++ ];
        }
        
        public void remove( )
        {
            if( !okToRemove )
                throw new IllegalStateException( );
                
            MyArrayList.this.remove( --current );
            okToRemove = false;
        }
    }
    
    private static final int DEFAULT_CAPACITY = 10;
    private static final int tamano = 10001;
    private AnyType [ ] theItems;
    private int theSize;
}

	
	public static void main(String[] args) throws NumberFormatException, IOException {
		

		MyArrayList<MyArrayList> arbol;
		MyArrayList<Integer> arreglo;
		
		
        MyLinkedList<Integer> cola;
        MyLinkedList<Integer> colaAux;
        
        
		BufferedReader scan  = new BufferedReader(new InputStreamReader(System.in));
		
		StringBuilder salida = new StringBuilder();
		StringBuilder salidaAux;
		
		String entrada;
		String nodoEntrada;
	
		
		int casos = Integer.parseInt(scan.readLine());
		
		for (int contCasos=1; contCasos<=casos; contCasos++){
			
			arbol = new MyArrayList<>( );
			arreglo = new MyArrayList<>( );			 
			cola = new MyLinkedList<>();
			colaAux = new MyLinkedList<>();
			for (int i=1; i<=100001; i++){
				arbol.add(arreglo);
			}
			int cantComandos = Integer.parseInt(scan.readLine());	
			salida.append("Caso #"+contCasos+":" + System.lineSeparator());
			int primerElemento = 0;
			for (int contComandos =1; contComandos <= cantComandos; contComandos++){
				nodoEntrada = scan.readLine();
				String[] lecturaLinea = nodoEntrada.split(" ");
		    	int idx_array =  Integer.parseInt(lecturaLinea[0]); 
				int values =0;
				if(contComandos==1){
		    	    primerElemento = idx_array;
		    	}
				for (int i=1; i<lecturaLinea.length;i++ ){
			    	arreglo.add(Integer.parseInt(lecturaLinea[i]));		    	
			    }
			    arbol.set(idx_array, arreglo);
		        arreglo = new MyArrayList<>( );
			}
			int index = primerElemento;
			int values=0;
			salida.append(primerElemento+" ");
			for(int i= (arbol.get(index).size()-1); i>=0; i-- ){
				values = (int) arbol.get(index).get(i);
	        	cola.enqueue_inverse(values);
	        	salida.append(values+" ");	
        	}			
			int accountant = 1;
            while(accountant <= cantComandos){
            	for(int i=0; i<cola.size(); i++){
	                if(cola.size()==0){
            			break;
            		}
            		index = cola.dequeue();
                    for (int j=0; j<arbol.get(index).size(); j++){
            			values =  (int) arbol.get(index).get(j);
            			colaAux.enqueue_inverse(values);
            			salida.append(values+ " " );
            		}
            	}
            	for(int j=0; j<colaAux.size(); j++){
            		if(colaAux.size()==0){
            			break;
            		}
            		index = colaAux.dequeue();
	            	for(int i=(arbol.get(index).size()-1); i>=0; i-- ){
	            		values = (int) (arbol.get(index).get(i));
	            		cola.enqueue_inverse(values);
	            		salida.append(values+" " );       	           		
	            	}	
            	}
            	accountant++;
            }
			salida.append(System.lineSeparator());
	}
System.out.println(salida);
}

	
}